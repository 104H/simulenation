'''
8 Nov, 2022

An exponential distribution with rate 13 is used to define the Ca levels.

Save the network frequently to assess the evolution of the connections.

This file is supposed to be run in the conda env nust-noautapses.
The nest installation in this env is built using sandra's branch which implements functionality for not having autapses with structural plasticity.

We try to grow connections using structural plasticity.
This file saves the network and restores it for future use.
'''
import logging
import os
import sys
import re
import time

import nest
import pickle
from matplotlib import pyplot as plt
import numpy as np

from fna.tools.visualization.helper import set_global_rcParams
from fna.tools.utils import logger
from fna.tools.utils.data_handling import set_storage_locations
from fna.tools.network_architect.topology import set_positions
from fna.networks.snn import SpikingNetwork
from fna.tools.network_architect.connectivity import NESTConnector
from fna.tools.utils.operations import copy_dict
from fna.decoders.extractors import set_recording_device
from fna.tools.parameters import extract_nestvalid_dict

from utils.parameters import ParameterSet

logprint = logger.get_logger(__name__)


class spikesandparams:
    def __init__(self, paramdict, spikeobj, metrics):
        self.params = paramdict
        self.spikeobj = spikeobj
        self.metrics = metrics
        self.calcium = {'eA1': [], 'MGN': []}
        '''
        self.connectivity = {
                "z" : {
                    "Den" : {
                            "ex" : { 'eA1' : [], 'MGN' : [] },
                            "in" : { 'eA1' : [], 'MGN' : [] }
                            },
                    "Axon" : {
                            "ex" : { 'eA1' : [], 'MGN' : [] },
                            "in" : { 'eA1' : [], 'MGN' : [] }
                            }
                    },
                "z_connected" : {
                    "Den" : {
                            "ex" : { 'eA1' : [], 'MGN' : [] },
                            "in" : { 'eA1' : [], 'MGN' : [] }
                            },
                    "Axon" : {
                            "ex" : { 'eA1' : [], 'MGN' : [] },
                            "in" : { 'eA1' : [], 'MGN' : [] }
                            }
                    }
                }
        '''
        # parent dict is the source, child dict is the target
        self.nestconnectivity = {
            'MGN': {'eA1': []},
            'eA1': {'eA1': []}
        }
        self.neuron_states = None


def store_net(topology_snn, rank, path, time):
    logprint.info("Storing Network")

    network = {}
    # topology_snn.populations['eA1'].nodes
    network["synapse_ex"] = nest.GetConnections().get(("source", "target", "delay", "weight"), output="pandas")

    p = os.path.join(path, f"{time}_net_{rank}")
    with open(p, "wb") as f:
        pickle.dump(network, f, pickle.HIGHEST_PROTOCOL)

    logprint.info("Network Stored")


def record_neuron_state(topology_snn):
    states = []
    for population in ["eA1", "iA1", "MGN", "TRN"]:
        for idx, node in enumerate(topology_snn.populations[population].nodes):
            if node.local == True:
                state = {
                    "population": population,
                    "id": idx,
                    "V_m": node.V_m,
                    "g_ex": node.g_ex,
                    "g_in": node.g_in,
                    "w": node.w
                }
                states.append(state)
    return states


def record_ca(population):
    ca = [c for c in population.nodes.Ca if c != None]
    return np.mean(ca)


def record_connectivity(population, connType, synType, metric):
    syn_elems = population.nodes.synaptic_elements
    return np.sum(list(neuron[connType + '_' + synType][metric] for neuron in syn_elems if neuron != None))


def record_connectivity_fromnest(source, target):
    return len(nest.GetConnections(source, target).get('target'))


def record_data(o, topology_snn):
    logprint.info("Recording Data")
    o.calcium['eA1'].append(record_ca(topology_snn.find_population('eA1')))
    o.calcium['MGN'].append(record_ca(topology_snn.find_population('MGN')))

    o.nestconnectivity['MGN']['eA1'].append(
        record_connectivity_fromnest(topology_snn.populations['MGN'].nodes, topology_snn.populations['eA1'].nodes))
    o.nestconnectivity['eA1']['eA1'].append(
        record_connectivity_fromnest(topology_snn.populations['eA1'].nodes, topology_snn.populations['eA1'].nodes))
    '''
    for z in ['z_connected', 'z']:
        for c in ['Axon', 'Den']:
            for t in ['ex', 'in']:
                for p in ['eA1', 'MGN']:
                    try:
                        o.connectivity[z][c][t][p].append( record_connectivity(topology_snn.find_population(p), c, t, z) ) 
                    except:
                        pass
    '''
    o.neuron_states = record_neuron_state(topology_snn)
    logprint.info("Data Recorded")


def run(parameters, display=False, plot=True, save=True, load_inputs=False):
    # ############################ SYSTEM
    nest.rng_seed = 12345

    # experiments parameters
    if not isinstance(parameters, ParameterSet):
        parameters = ParameterSet(parameters)

    storage_paths = set_storage_locations(parameters.kernel_pars.data_path, parameters.kernel_pars.data_prefix,
                                          parameters.label, save=save)
    # set kernel parameters after reset
    parameters.kernel_pars['local_num_threads'] = 1  # can't run plasticity with multiple threads
    parameters.kernel_pars['data_path'] = storage_paths['other']  # store the spikerecorder readings to the other folder
    print(parameters.kernel_pars)
    print(extract_nestvalid_dict(parameters.kernel_pars.as_dict(), param_type='kernel'))
    nest.SetKernelStatus(extract_nestvalid_dict(parameters.kernel_pars.as_dict(), param_type='kernel'))

    logger.update_log_handles(job_name=parameters.label, path=storage_paths['logs'])

    '''
    # now we build the network
    pos_exc = set_positions(N=parameters.net_pars.population_size[0], dim=2, topology='random',
                            specs=parameters.layer_pars)
    pos_inh = set_positions(N=parameters.net_pars.population_size[1], dim=2, topology='random',
                            specs=parameters.layer_pars)

    #E_layer_properties = copy_dict(parameters.layer_pars, {'positions': pos_exc})
    #I_layer_properties = copy_dict(parameters.layer_pars, {'positions': pos_inh})
    '''

    spike_recorder = set_recording_device(start=0., stop=sys.float_info.max,
                                          resolution=parameters.kernel_pars.resolution,
                                          record_to='memory', device_type='spike_recorder')
    spike_recorders = [spike_recorder for _ in parameters.net_pars.populations]

    topology_snn = SpikingNetwork(parameters.net_pars, label='AdEx with spatial topology',
                                  # topologies=[E_layer_properties, I_layer_properties],
                                  spike_recorders=spike_recorders)

    logprint.info("Network Created")

    # connect network
    NESTConnector(source_network=topology_snn, target_network=topology_snn,
                  connection_parameters=parameters.connection_pars)

    # possion generator
    pg_th = nest.Create('poisson_generator', n=1, params={'rate': parameters.noise_pars.nuX_th})
    nest.Connect(pg_th, topology_snn.find_population('MGN').nodes, 'all_to_all',
                 syn_spec={'weight': parameters.noise_pars.w_noise_mgn})
    nest.Connect(pg_th, topology_snn.find_population('TRN').nodes, 'all_to_all',
                 syn_spec={'weight': parameters.noise_pars.w_noise_trn})

    pg_aone = nest.Create('poisson_generator', n=1, params={'rate': parameters.noise_pars.nuX_aone})
    # The nuX value has been multiplied by .8 to demonstrate demy from background connections to the eA1
    nest.Connect(pg_aone, topology_snn.find_population('eA1').nodes, 'all_to_all',
                 syn_spec={'weight': parameters.noise_pars.w_noise_ctx * 0.8})
    nest.Connect(pg_aone, topology_snn.find_population('iA1').nodes, 'all_to_all',
                 syn_spec={'weight': parameters.noise_pars.w_noise_ctx})

    if parameters.hetdelay_pars.hetdelay_ctx:
        assert False
        # connect the ctx with heterogenous delays
        s = nest.GetConnections(topology_snn.find_population('eA1').nodes, topology_snn.find_population('eA1').nodes)
        s.delay = uniform(low=1., high=3., size=len(s))
        s = nest.GetConnections(topology_snn.find_population('eA1').nodes, topology_snn.find_population('iA1').nodes)
        s.delay = uniform(low=1., high=3., size=len(s))
        s = nest.GetConnections(topology_snn.find_population('iA1').nodes, topology_snn.find_population('eA1').nodes)
        s.delay = uniform(low=1., high=3., size=len(s))
        s = nest.GetConnections(topology_snn.find_population('iA1').nodes, topology_snn.find_population('iA1').nodes)
        s.delay = uniform(low=1., high=3., size=len(s))

    if parameters.hetdelay_pars.hetdelay_thl:
        assert False
        # connect the thl with heterogenous delays
        s = nest.GetConnections(topology_snn.find_population('MGN').nodes, topology_snn.find_population('TRN').nodes)
        s.delay = uniform(low=1., high=3., size=len(s))
        s = nest.GetConnections(topology_snn.find_population('TRN').nodes, topology_snn.find_population('MGN').nodes)
        s.delay = uniform(low=1., high=3., size=len(s))

    # ''' tonotopic MGN to eA1 connection
    # the populations of MGN and eA1 was split into 5 equally sized subpopulations
    # each was these was only connected to a corresponding subpopulation
    # e.g Neurons 1-100 MGN are connected to neurons 1-400 in the eA1
    for m, c in zip(range(0, 200, 40), range(0, 2000, 400)):
        # connection from mgn to eA1
        nest.Connect(topology_snn.find_population('MGN').nodes[m: m + 40], \
                     topology_snn.find_population('eA1').nodes[c: c + 400], \
                     parameters.mgn_ctx_pars.conn, \
                     parameters.mgn_ctx_pars.syn)
        nest.Connect(topology_snn.find_population('eA1').nodes[c: c + 400], \
                     topology_snn.find_population('MGN').nodes[m: m + 40], \
                     parameters.ctx_mgn_pars.conn, \
                     parameters.ctx_mgn_pars.syn)
    # '''


    nest.structural_plasticity_update_interval = parameters.sp_pars['update_interval'] * 1000.

    ''' Stimulus generator removed for now
    # stimulus generator
    ng = nest.Create('poisson_generator', n=1, params={'rate': parameters.noise_pars.nuX_stim, 'start' : 2000., 'stop' : 2025.})
    # connecting stimulus !!! generator to snn
    nest.Connect(ng, topology_snn.populations['TRN'].nodes, 'all_to_all', syn_spec={'weight': parameters.noise_pars.w_noise_stim})
    '''

    # preparing file path to save data
    rank = str(nest.Rank())
    filepath = os.path.join(storage_paths['activity'], f'spk_{parameters.label}_{rank}')
    net_storage_folder = os.path.join(storage_paths['other'], f'spk_{parameters.label}_{rank}')
    o = spikesandparams(parameters.label, None, None)

    #'''setting the synatic elements
    for idx in range(200):
        synaptic_elements = {
            'Axon_ex': parameters.growth_pars['growth_curve_mgn_axon'][idx],
        }
        nest.SetStatus(topology_snn.find_population('MGN').nodes[idx], 'synaptic_elements', synaptic_elements)

    # setting the synatic elements to the ctx
    for idx in range(2000):
        synaptic_elements = {
            'Den_ex': parameters.growth_pars['growth_curve_eaone_exc_dendrite'][idx],
            'Axon_ex': parameters.growth_pars['growth_curve_eaone_exc_axon'][idx],
        }
        nest.SetStatus(topology_snn.find_population('eA1').nodes[idx], 'synaptic_elements', synaptic_elements)
    #'''
    #'''
    nest.CopyModel('static_synapse', 'synapse_ex')
    nest.SetDefaults('synapse_ex', {'weight': 4, 'delay': 1.5})  # add w_aone
    nest.structural_plasticity_synapses = {
        'synapse_ex': {
            'synapse_model': 'synapse_ex',
            'post_synaptic_element': 'Den_ex',
            'pre_synaptic_element': 'Axon_ex',
            'allow_autapses': False,
        }
    }
    #'''

    logprint.info("Connections Created")

    if not os.path.exists(net_storage_folder):
        os.makedirs(net_storage_folder) # create folder for storing

    # store the network state at time zero
    store_net(topology_snn, rank, net_storage_folder, 0)
    record_data(o, topology_snn)

    # Simulate for 5 seconds to remove initial transients
    #nest.Simulate(100. * 1000)
    #record_data(o, topology_snn)

    #'''
    # assign prerecorded Ca level as target Ca level to the MGN Neuron
    mgn_calevels = [0.1306749611126708, 0.13250837799162613, 0.07359362046589335, 0.0857746347378601, 0.09758092955531467, 0.07080536578123978, 0.103321477845676, 0.13353038317040153, 0.07985505698585536, 0.07662704239763822, 0.07181860717364236, 0.07640088755220419, 0.09224986720744606, 0.14687766333163585, 0.17814660546656583, 0.089506725628318, 0.15630907912278885, 0.05598603632361908, 0.11291675500312388, 0.03759769747495233, 0.11752903774986705, 0.10755981249744039, 0.1316429038869785, 0.1121557535872343, 0.09318817051667189, 0.09694201364722416, 0.09688467967390667, 0.11742559320402142, 0.16517936519196577, 0.12419922769057447, 0.08491548435818302, 0.13089813754060803, 0.0776775929588781, 0.06925384043105039, 0.08030590950617945, 0.21846722305225186, 0.12875575423519314, 0.07665832738370047, 0.1299967563795542, 0.11239978843325943, 0.1950106454622161, 0.11644118135083203, 0.11926661020991546, 0.07366446396666514, 0.14657272312628136, 0.050461378154894335, 0.17112469220960486, 0.18768354217196745, 0.07339294505725392, 0.15341192166194093, 0.13984910310723742, 0.14397935759749797, 0.0981139511826351, 0.059456021336533875, 0.0737597958226806, 0.1593161148297128, 0.18435057901320473, 0.10270140312343153, 0.12607835582367463, 0.12418575030136152, 0.13275004145028635, 0.2109176755935284, 0.18524642679213263, 0.07608158246189817, 0.1501366064583287, 0.07901895607670929, 0.05679718666382112, 0.1796447815422642, 0.1321728878132902, 0.0998656216116993, 0.0794146785824299, 0.06172340466323236, 0.1882063585827937, 0.1646313424717057, 0.1515179868662534, 0.11026334274682736, 0.11601073272558128, 0.22285491102408136, 0.10887431527588798, 0.1529910734980118, 0.19066865087752705, 0.11826659807116162, 0.20745032203594674, 0.10678148346058586, 0.051047640170603925, 0.09713570355475412, 0.1169547452355731, 0.1011993331147814, 0.1621591846765492, 0.10040920125892351, 0.07592239461299059, 0.14807548698144232, 0.10009258704969556, 0.15429625435583844, 0.1403675256957337, 0.11801600228417795, 0.1157478443747466, 0.11657554892484592, 0.10932708060076611, 0.15306470144308423, 0.2358897958790077, 0.13387192283639687, 0.18319176708002824, 0.14622598831293884, 0.14614380936473953, 0.12461286047316882, 0.15961746890127945, 0.14649902073101395, 0.172609444807599, 0.13855903119170976, 0.12129648180929947, 0.12114241236313937, 0.1613289199375949, 0.10861572406131483, 0.15588895022021262, 0.08009751483880662, 0.06566361682147262, 0.14748703582293546, 0.14242811020813995, 0.09567763815531317, 0.0985300689236855, 0.09317595306651927, 0.10719500585668316, 0.09560169675458327, 0.17966927619919718, 0.012181701547877496, 0.094361154578212, 0.0960160384939408, 0.12136864365763157, 0.09724878746983208, 0.09083807920852459, 0.10303395581518716, 0.08728472425261166, 0.18534509730321874, 0.11952661986161581, 0.07673792072962339, 0.11035976631339751, 0.07218160023981811, 0.10271262336473237, 0.10072057181321879, 0.05648612703375729, 0.1437503046576976, 0.08798568723452492, 0.20604524059590135, 0.10069355955969553, 0.08551492982123689, 0.11812713721968028, 0.09868713261626723, 0.12548328831790478, 0.12478381444082985, 0.07055226413728295, 0.06438381415688485, 0.07252044510389834, 0.11364721618156323, 0.12723165920488638, 0.07355211315485136, 0.14396549903776482, 0.06934243689276659, 0.09780567918317781, 0.056049047964353386, 0.12093250513003136, 0.13340372171247147, 0.15314079658678395, 0.10883325274657597, 0.050718656754518684, 0.09334217356370593, 0.08710664673183083, 0.09652229539979687, 0.1248459104493973, 0.0875588974305117, 0.13388206385871965, 0.0998360602354392, 0.10010620998287512, 0.10868437465155102, 0.09835975390384459, 0.09612592303670693, 0.09296065763576378, 0.0748154661982761, 0.12714166317034178, 0.09944003835773331, 0.19695348586364186, 0.12054667933780261, 0.16010814714855098, 0.07811080963035957, 0.22830045871830607, 0.06660889909566013, 0.0842505455880733, 0.07645428580685491, 0.09894731510407144, 0.059315507320825946, 0.08589484200278108, 0.129543576875676, 0.06812961082963571, 0.23242724273949977, 0.09029624551891628, 0.17195596643292846, 0.09004119468880388, 0.09189555169670782, 0.11978379904577673, 0.0863779445044115]
    for idx in range(200):
        if topology_snn.find_population('MGN').nodes[idx].local == True:
            if mgn_calevels[idx] == 0: mgn_calevels[idx] = .129
            parameters.growth_pars['growth_curve_mgn_axon'][idx]['eps'] = mgn_calevels[idx]
            synaptic_elements = {
                'Axon_ex': parameters.growth_pars['growth_curve_mgn_axon'][idx],
            }
            nest.SetStatus(topology_snn.find_population('MGN').nodes[idx], 'synaptic_elements_param', synaptic_elements)

    # assign prerecorded Ca level as target Ca level to the eA1 Neuron
    eaone_calevels = [0.09695681595553712, 0.08756876854884561, 0.056912098386328346, 0.002727573810559151, 0.049068216304332515, 0.41108257778778523, 0.1261350540481337, 0.02083967027286137, 0.02441746503771942, 0.19867965277447525, 0.18019953170086336, 0.09030473171974046, 1.9266660871433683e-05, 0.056845766509126885, 0.0687573629953008, 0.0806301127264581, 0.20211815792866702, 0.03220191577244837, 0.20441444542988257, 0.09599380984588582, 0.04555894394121703, 0.012174335909502912, 0.04548914952198565, 0.0027338861276052975, 0.020458768532684232, 0.03083214752631502, 0.08455781997160546, 0.051172993959587985, 0.2675142049635148, 0.04376970024405884, 0.03187940192976838, 0.21050960062226193, 0.23460446407616875, 0.06993427466198658, 0.0010612291605044018, 0.19754699142086435, 0.26605232308416055, 0.03018785967436571, 0.015845952742265662, 0.03594134869710812, 0.5067703406260946, 0.09756791092357861, 0.10718531960415771, 0.07549469207624426, 0.06498504620694577, 0.36911532987431844, 0.16403033313872664, 0.05839924146385891, 0.005162345644478165, 0.13166027270886127, 0.040238478663098064, 0.04037804838877799, 0.009894647359580781, 0.04987412243195028, 0.1274679912661324, 0.03641394381244297, 0.0064923095169182946, 0.00912814544876012, 0.272397120966423, 0.44409779121825754, 0.08531422290012257, 0.007901243953090416, 0.03321427191633301, 0.1235164904806167, 0.012700559548853902, 0.0, 0.008569600584936896, 0.036025657530216575, 0.1163550395351486, 0.02274008792828278, 0.11925516455878425, 0.13972339193803154, 0.096490921075385, 0.06805721255268825, 0.10756741764345386, 0.34354173464305876, 0.10417234722728355, 0.11028594553177747, 0.18433424335005544, 0.029113475023270413, 0.023518472913541477, 0.16204418276753707, 0.37993224763040134, 0.05826722100417177, 0.22890265259089546, 0.044652616379625566, 0.09207019965841937, 0.05181168520432912, 0.0, 0.048641342218025824, 0.1121850157326428, 0.06897992735981597, 0.1812962132891742, 0.18673161457819887, 0.2241730679959065, 0.03603526800215489, 0.25063388183959695, 0.022001576532218802, 0.0, 0.12099124786405321, 0.0012242671287343617, 0.036503630355850365, 0.33590787692303975, 0.031065606023294872, 0.061567127321769756, 0.018688778842578076, 0.20910708197331276, 0.04061652145478679, 0.2699248297193441, 0.11784056139060785, 0.08785545391990382, 0.07094682651234534, 0.023148758564504577, 0.10422051969455645, 0.0, 0.15414227654644758, 0.0122803323480446, 0.04137539558081016, 0.022205975584384165, 0.017832506297630873, 0.34818173310857925, 0.13866080813578968, 0.12535670979670382, 0.2886747127620022, 0.03152520432319378, 0.24605121438521968, 0.1510127392030035, 0.1253586977132711, 0.0020946403103859874, 0.002873488302129901, 0.02364483264785176, 0.0241947346807761, 0.0025576165337959605, 0.21635503191568373, 0.10472067531446855, 0.12205981354143765, 0.19086617171318773, 0.0517987213068143, 0.0007441687796214787, 0.0061428761301892155, 0.00024788485701976524, 1.273526960981727e-05, 0.39051435902774523, 0.19890909003141194, 0.02805758523895105, 0.027447369529106404, 0.382287577624815, 0.00650885001497414, 0.017101341954127568, 0.005435642778870873, 0.013148547102156669, 0.08374310149323594, 0.4501356909486279, 0.4148323520928817, 0.15047118536395895, 0.1332080969250473, 0.2625991550917667, 0.17607688173889777, 0.006064772098644981, 0.027504332405933637, 0.010093872877603084, 0.0003039672014440738, 0.00604657543673708, 0.00702660828727194, 0.16782843573354592, 0.40483431659955577, 3.6815202016736814e-05, 0.0009289944409705664, 0.2037169163382865, 0.04174834778659482, 0.01776692739045468, 0.012512459544133136, 0.24425368785734553, 0.06784254430876145, 0.008246973061407627, 0.008752724491883215, 0.4047116940797268, 0.46438067885573275, 0.37532741725811686, 0.02163547084865553, 0.1180404289573006, 0.047260785255361044, 0.045570569366949386, 0.007147264492129703, 0.08420289536713449, 0.005341307799081101, 0.18825706437444148, 0.009476105820547238, 0.17226177099206494, 0.10363717369904704, 0.018446942826205327, 0.054730174681813, 0.2926037453034675, 0.0030701498624879802, 0.1613256367336563, 0.43915383593528323, 0.09440842995562586, 0.10809065848006169, 0.05550084942327104, 0.0023755690121115025, 0.0325307137190389, 1.725203998559408e-05, 0.05595485518927234, 0.08370544001518614, 0.04149333043639957, 0.0937760947250406, 0.1575960194080701, 0.012195222071370967, 0.08530685472990066, 0.0196097958385356, 0.003898134062044319, 0.061606135990443844, 0.08192056476548361, 0.2393811935793079, 0.01666474869892064, 0.0832991047209985, 0.04218782942566634, 0.08085086218383308, 0.04933669636987774, 0.03835768324784336, 0.025632080182721596, 0.12256430496196055, 0.1364399758789587, 0.17411169887618544, 0.003009223036617602, 0.03754544159783588, 0.13892677062548733, 0.022063236774338964, 0.05465644898672491, 0.17999713427022698, 0.32867565701182794, 0.010543812242100123, 0.07883779190618291, 0.5704244498945262, 0.03540859432647046, 0.0021521338591578964, 0.004192822379655539, 0.1490250772399069, 0.0034449820003708545, 0.019183298325575224, 0.39635814843974854, 0.009812880618874314, 0.09274727090468719, 0.0072190589482382765, 0.145873134564535, 0.16346864741538572, 0.163164682456478, 0.1569693760069858, 0.1892401342331967, 0.008003792945554693, 0.100603458613721, 0.1256381200279299, 0.055616025509290436, 0.2192067624212353, 0.028333187829451406, 0.14813173549422876, 0.44173340268020317, 0.10773547527242752, 0.00028955122993304215, 0.00906971490391445, 0.32986250652453064, 0.03540727624045168, 0.00034401815364462727, 0.055233582292431575, 0.08955792988117069, 0.09970631547176237, 0.11593020806977242, 0.08377244590093331, 0.0014655472394950327, 0.010522204788936174, 0.019761428651099762, 0.002850061856569715, 0.0013203992144217587, 0.3693752266534925, 0.047415987906681965, 0.0008760180346066679, 0.1875246877811642, 0.04140567264225831, 0.00238675186947767, 0.057359635993094696, 0.1950512297253716, 0.2251803056170121, 0.04096720842869786, 0.061788986746334054, 0.10255798352882832, 0.04527130548204845, 0.016231361009557046, 4.54862716278311e-08, 8.394909119921788e-08, 6.3560147676085564e-06, 0.010254950231732151, 0.2768954650946922, 0.027146958896417505, 0.019809711932272638, 0.013909915231962913, 0.03538160695519062, 0.08109393142652713, 0.0647465379482621, 0.2541741637430048, 7.532183804907921e-06, 0.011940990206349417, 0.45416557881032577, 0.19148309727194016, 0.04051908287077343, 0.05817056770505259, 0.19038960353296674, 0.0008151185090326842, 0.02094219095427847, 0.03254274022510588, 0.2798012471644996, 0.08890897652348302, 0.06641110185476537, 0.17793459040348078, 0.08149944760088783, 0.008358524183627869, 0.03526714610402985, 0.011976050905084891, 0.0017151893920495642, 0.1593182531044849, 0.003630458795626719, 0.047704176713713575, 0.22574119345304286, 0.09487418495616855, 0.34166812972943933, 0.07595739395233815, 0.0005275259200910789, 0.005637552834352765, 0.02788966169494594, 0.16934857395593395, 0.26275610227905183, 0.6018216100999936, 0.27594050245599255, 0.0006169582837643199, 0.01236802146279054, 0.12193594727799738, 0.0268039476171911, 0.006172929325511045, 0.14577567731435012, 0.03444241383996048, 0.14483319758801108, 0.03810837391188368, 0.17722537443971767, 0.1340899480344844, 0.08666124978924056, 0.06685736509764742, 0.0005746481962450139, 0.06770165812049167, 0.03312154260653542, 0.07575528843130358, 0.12296573420460509, 0.10236618251884491, 0.6378477627642558, 0.021358810169704468, 0.2780228750861554, 0.00793289304473791, 0.02872000610472141, 0.07873876149755289, 0.21667978484719702, 0.3554508503614682, 0.001477336349302674, 0.09174652505488447, 0.0800539870648022, 0.0020882883955246822, 0.011185341291450148, 0.0005177618492567314, 0.030008393288695357, 0.04287252228856087, 0.012221869756753044, 0.07765063428806826, 0.005380887427984078, 0.004442549805475163, 0.008497281873890688, 0.45263695465127957, 0.09543436572496478, 0.18278258724134802, 0.025965814899185306, 0.1258284654586113, 0.010730526345893797, 0.0, 0.00011323984129642551, 0.09272729552632551, 0.021427899453668506, 0.3965309677445632, 0.009048860255380034, 0.07466992631831086, 0.02489596015391514, 0.03344279060367204, 0.30798101108060993, 0.012927764485954006, 0.06577756621581209, 0.07805526806460508, 0.19378973096240404, 0.20356483431166106, 0.0526339891549245, 0.07117552004549121, 0.0912716388866279, 0.014518042147661777, 0.06741427614952074, 0.009827268016958697, 0.2969077825814074, 0.0038462448677836335, 0.4114045959616861, 0.0007930243360856577, 0.1473198287387979, 0.22730105758780922, 0.02433867560375562, 0.0019257246690270353, 0.0016063043541043836, 0.22753272580409162, 0.5438254367753088, 0.03313446606649917, 0.12164927264164868, 0.002758627308062527, 0.49238032376248664, 0.2340168389941178, 0.27066193857071774, 0.06564662221487036, 0.03787685703578152, 0.12991943389912247, 0.06376246906550888, 0.055885306702675205, 0.13190151406101033, 0.0028072015276242295, 3.113524133656104e-05, 0.024896311962029676, 0.010578662010249191, 0.1697086222460932, 0.11094619142991716, 0.01683066262251322, 0.0, 0.20580513626472258, 0.053258740529836326, 0.03087029087731458, 0.13351654456171655, 0.12131157896376539, 3.823978137142136e-05, 0.011388889653662632, 3.794461322853699e-05, 0.13766877981367182, 0.19562287118490956, 0.034006105996986356, 0.2690616226920262, 0.09617233680416819, 0.044298566593439774, 0.2112047025406814, 0.05633565356512923, 0.003962934483190397, 0.012284532665471526, 0.48234171902140366, 0.005655333257245268, 0.07695942105465452, 0.007487800609567057, 0.06111225138505393, 0.203852266265408, 0.01334098989394762, 0.023198080807093985, 0.022510479305869767, 0.039986638326281354, 0.0032233303593585654, 0.0011718319778847887, 0.10127004869610058, 0.0067657470307440236, 0.00661837809971914, 0.12400965772426424, 0.04554053054586147, 0.09625659838978251, 0.016760779814762587, 0.06195321041232455, 0.033073899907482746, 0.002894805616905378, 0.09421757906477488, 0.00964424276712449, 0.0009715288630540985, 0.6497786085865999, 0.006576328476661566, 0.04654955541880728, 0.08649001353041343, 0.0828996362362456, 0.0, 0.09474018730936853, 0.19505673727218642, 0.05153643441257129, 0.0982548233597603, 0.0806845388198262, 0.2949681250862525, 0.0489860197712517, 0.030531019546558152, 0.07762551043015911, 0.24471245582015227, 0.14687562821815228, 0.042490868412836905, 0.004194236211058133, 0.08284745182638029, 0.2921374699292023, 0.07165997398790405, 0.04682667206982158, 0.0014384794188193207, 0.253103729858312, 0.10846546049515132, 0.2039299245645999, 0.054634292238538905, 0.06294923338510906, 0.08048539838112631, 0.019464026309821192, 0.019002364402211154, 9.990355644941191e-07, 0.10623763317220353, 0.0003362244615648501, 0.2421764050383534, 0.034610993366024544, 0.12604163540062752, 0.006310693997260937, 0.44211972807191513, 0.058171001292853616, 0.0158396852187661, 0.2870340723558059, 0.0, 0.0001955109499664916, 0.2095375148500561, 0.039245135656170264, 0.20280566977798714, 0.06000204648289921, 0.07054216390061892, 0.008409328049907084, 0.04401318083128645, 0.0026008995798181447, 0.14132085883853973, 0.06717455862876978, 0.2924054858669102, 0.2886162980600046, 0.01280789239333605, 0.08572645933846099, 4.548172322809211e-08, 0.09087330980475289, 0.03669272770885912, 0.42036541293461027, 0.06670380180380191, 0.006053769236148386, 0.01109768952217536, 0.08469877676125032, 0.16288436302690093, 0.3496196969352321, 0.39541691584154604, 0.0717852476554301, 0.11109545907269115, 0.05679522339051184, 0.040755323608946084, 0.1864649327678941, 0.18154011364394146, 0.004433165055940052, 0.2596406318051715, 0.06526941846034326, 0.005249571265749554, 0.1888507454285764, 0.12572679814557927, 0.08232302108464633, 0.36545142197220365, 0.3597120589207064, 0.006450599028447085, 0.16722957049858897, 0.12313449047913083, 0.010997536960043183, 0.03183032176607984, 0.3506942803633293, 0.01023164342584894, 0.0573762317619277, 0.14877063766782309, 0.00525910379709573, 0.04550823500806056, 0.01163588925388609, 0.056754780984217275, 0.0232341325785086, 0.32305104386773964, 0.21905676613261232, 0.25357458662677007, 0.2673994980335308, 0.09545432578239575, 0.08114593496870201, 0.018988864015668603, 0.03818274386021121, 0.09122856396322848, 0.3507021594470081, 0.05766621802976307, 0.026368603808921025, 0.08965408344009132, 0.007269993832760271, 0.28976183529823946, 0.025408063603501143, 0.015742161554281976, 0.2263007249737862, 0.004311081347749097, 0.14979291010427045, 0.0030927841583336464, 0.000944946766032816, 0.2529969218798513, 0.19811777651695572, 0.0982218343950648, 0.061309165328310315, 0.09850116575152262, 0.0369045019535493, 0.10468443510255263, 0.4069161714000564, 0.028437434957577796, 0.21472431827669827, 0.1563799181945332, 0.1636216601114789, 0.01995471124131786, 0.3508566934554266, 0.0010863773444741542, 0.3473233386192873, 0.24807089820282607, 0.35155704276460026, 0.014031699810157283, 0.027226224331179674, 0.05606862698925922, 0.058339066668705496, 0.2919806365095049, 0.14048260230716134, 0.10260071376428127, 0.04349501430857281, 0.10545960414094722, 0.618616578588949, 0.02230520959554151, 0.15936118006094058, 0.3977635828288357, 0.24857386834438178, 0.0027723780155427718, 0.12214504181191636, 0.043597899753666285, 0.30014411529029894, 0.05443292299258648, 0.02323165724919852, 0.006592209746522505, 0.08586356208848545, 0.0014209128522790835, 0.11531914245022137, 0.017347743709694708, 0.11244071903642383, 0.17937211826917754, 0.028995530961484512, 0.14109305443366915, 0.025265830966894137, 0.0008767366169489049, 0.08486898363308631, 0.13119849398959568, 0.05404049941853421, 0.0037343037146829513, 0.11321275535476907, 0.027118864195005216, 0.00813155723569857, 0.025542418486270542, 0.041415704152894584, 0.030433310185706358, 0.08058572888261213, 0.09674799520825295, 0.20409168250932339, 0.019158529700320198, 0.21949678045886017, 0.10140265508209755, 0.06092964476143074, 0.16988017280349826, 0.009460883926220605, 0.002196336860012573, 0.000593059829036129, 0.05877051447237246, 0.1876251246883889, 0.01606771818230743, 0.3712691582220385, 0.027452038085074255, 0.0034566504706223834, 0.23316531700050053, 0.16217596870333365, 0.004682440568218743, 0.01887700934201933, 0.009343231092413421, 0.2732691962075194, 0.15579290163109752, 0.008685624038018614, 0.15421138319603567, 0.049267852121035086, 0.14038347945170643, 0.011801628070152309, 0.1020554229628249, 0.0061306868229338354, 0.023211484326079734, 0.11592760869613693, 0.019133010022121328, 0.13566606458594954, 0.016067020404592437, 0.10083330988806612, 0.005254452271698384, 0.2132481621072575, 0.22422691208763293, 0.23711432451448453, 0.22823191641060533, 0.33665756243018763, 0.10488631000495956, 0.25404904693139424, 0.031124736507751983, 0.004780952386084103, 0.0033732404747285226, 0.0075266664887786204, 0.004856455039672824, 0.059610370045724635, 0.17370255966551254, 0.29122018874873745, 0.4481203756995702, 0.14771490564855175, 0.010612409357380842, 0.12392546849085173, 0.16003182934898466, 0.0005445614069643708, 0.0, 0.027394442839149546, 0.12452901981903904, 0.02600798520698751, 0.014418659419957723, 0.2612657931212068, 0.025331995917902955, 0.005435504614540248, 0.07145954219128639, 0.046074338663805024, 0.26795748422438254, 0.20701001626432813, 0.02806367921683672, 0.04614975750344324, 0.4240465131120623, 0.05169781191644787, 0.30111377242986903, 0.04226216416845988, 0.053540311131209474, 0.030951992745867123, 0.27296422684927685, 0.17119455942614176, 0.19262299336143307, 0.015663097810870504, 0.033546351397141516, 0.17907068012058167, 0.29460784889511277, 0.013480795477662759, 0.009606278190929088, 0.09845294823382757, 0.0028398587944723883, 0.008898098915171173, 0.019521873098238624, 0.31807962882742835, 0.07533025534164188, 0.007823454040575748, 0.15671103677083567, 1.149420333895953e-05, 0.04899812457122701, 0.2299799620428918, 0.04947529914762305, 0.00211093035555438, 0.03956066091279659, 0.005333359907496079, 0.0705544983010478, 0.13451413606879387, 0.0346873428708188, 0.05684963447533967, 0.23817421605140732, 0.1368124429243459, 0.5792431213326015, 0.2289480890364461, 0.06501023629191643, 0.6523160386521044, 0.1106301653978924, 0.14730045727229737, 0.0018803699653647658, 0.2555262286045923, 0.003297256280472329, 0.013065968377413337, 0.10576476245676718, 0.08218170505453988, 0.2577590575207688, 0.041713786391339, 0.0052153423322010015, 0.1086513982509557, 0.0032420728806557097, 0.03645415002542156, 0.040420595760536006, 0.1403536468592645, 0.008818484499184738, 0.11949759965265486, 0.2800579420952186, 0.3513489987714827, 0.2395054407419661, 0.027050449067627432, 0.14167772717935959, 0.09668248807961159, 0.002467279994288447, 0.01794812790762257, 0.13780393510473166, 0.029186860595740133, 0.11178522300240534, 0.10816831389537822, 0.11623599661392224, 0.07089054223040812, 0.005002433361849252, 0.040098102556199645, 0.12018805480745373, 0.09760819356579843, 0.43104224431848187, 0.05308844053932143, 0.05135950407066927, 0.002682761813463334, 0.0627464864263773, 0.004071123576470288, 0.16487831864647173, 0.03626076694455761, 0.040652421344916416, 0.029104669604097667, 0.14498288265258202, 0.17186388058761642, 0.013004742829364483, 0.06643928342158309, 0.21315149801933955, 0.25224395079643314, 0.007152639953726103, 0.10205353292315285, 0.23765607208587983, 0.0046099061844533384, 0.25936091702902664, 0.060928142742863046, 0.02090356407545591, 0.16062708281876942, 0.36520212630703625, 0.0005288291769870696, 0.005604059579310361, 0.2400919011504043, 0.012739000712617621, 0.0172084744076972, 0.0007393796125728799, 0.3052774753345786, 0.014480138988871124, 0.26394040061237095, 0.3118431352534454, 0.016755724179585447, 0.01719129008700078, 0.031808215425879326, 0.29139272838569885, 0.11848472007135485, 0.16212420249844778, 0.003233225797250663, 0.1350787603041033, 0.009322319260682952, 0.010819143252023034, 0.03180912622420763, 0.016229680323882972, 0.17477339173715117, 0.06667493529893455, 0.0009810632195780614, 0.1665289794657084, 0.36144770131158976, 0.01499799119847109, 0.3734324840954341, 0.011773330010221177, 0.1517477917261278, 0.04879909748762168, 0.19297073314391014, 0.03593341071853399, 0.16911072406277414, 0.5678228580314765, 0.012964165806241528, 0.21227956312793217, 0.07847594722480099, 0.026287437690467798, 0.01699444793661357, 0.08078600135432225, 0.00455128378404479, 0.034894299307043714, 0.058060096470045626, 0.00019310452030190802, 0.33701381551564913, 0.019370397188538693, 0.03533415607301758, 0.2701603966250564, 0.14327263634150858, 0.047738235977019816, 0.001672722188154179, 0.015853023643003436, 0.05706883341501117, 4.294641767542374e-05, 0.1974135476802153, 1.4141593830539512e-06, 0.021343811081613057, 0.008442566851115127, 0.2671232038283808, 0.003955431857804912, 0.1399181688645752, 0.19078159029057365, 0.21797645016638892, 0.13611149652970103, 0.00028848087222682985, 0.0062360728365933454, 0.16433383355407377, 0.0312062788563893, 0.009327814651840042, 0.0016181598759836759, 0.14635264652892235, 0.15153590406101472, 0.0008363380644912811, 0.21721426252723156, 0.03595903787671971, 0.029717846861465273, 0.18666700340805034, 0.24054258346477772, 0.3271355363320343, 0.03368505393201328, 0.07854538694846004, 0.02539060653410962, 0.08891462137076445, 0.1670573120251696, 0.0009699988925996028, 0.009820161364695185, 0.028527318317970167, 0.01690301197573775, 0.4537020384788607, 0.1218865910074741, 0.07205732765437546, 0.016317519842558664, 0.06239566588439263, 0.12682988489311822, 0.02170670745465417, 0.004225979013987761, 0.05662849605792986, 0.25164598532368565, 0.09251047018409667, 0.00045468140450186567, 0.4956798272467323, 0.06662494328907094, 0.34964880935392517, 0.06893843467202612, 0.39947699167492023, 0.10425594632456386, 0.021074315624075173, 0.22664017682592735, 0.18443137593301898, 0.3975513673948149, 0.07969561130073709, 0.10498093163719636, 0.06045461596714992, 0.11386241757537983, 0.017676110032004852, 0.0028526631145844067, 0.12728594448443023, 0.0991719676193304, 0.007086334817319825, 0.014919513357353502, 0.15717087128222224, 0.05590475512948728, 0.2535666396697606, 0.0007895854784457362, 0.38575078960403747, 0.17859886505186312, 0.03042249261684909, 0.11242949336736986, 0.04014092447650543, 0.06459632833335152, 0.0034708787033905816, 4.161727223204557e-05, 0.023472379991783476, 0.07322651327406796, 0.08968431815535793, 0.0003728703370228859, 0.008253597918309702, 0.2804868903983717, 4.1698142765545736e-05, 0.08466436257331843, 0.0004373291546616381, 0.04949048865690956, 0.3436061976090974, 0.0034682362924488347, 0.3120354556080517, 0.007160635978774749, 0.1030980626171582, 0.007908068311738523, 0.25728950999209227, 0.039925004773414714, 0.026943679674222374, 0.22188455195935436, 0.011296130061609708, 0.2497209682720124, 0.08591074267090494, 0.03980551504132538, 0.5626767127007715, 0.12253578624315915, 0.043398555893321825, 0.032661432821953905, 0.2573941168742679, 0.23785313869577027, 0.05040816882199769, 0.10294778465973889, 1.9564140120558898e-05, 0.13786007230684705, 0.1787353069024376, 0.19937496901794577, 0.2624763447605274, 0.01638255617690186, 0.01606154357887262, 0.007193123397976831, 0.042421407243954726, 0.008897445470592883, 0.000729176943294469, 0.010703615019851913, 0.07387801606706276, 0.19508458652363303, 0.012851778358417974, 4.0978005230646217e-07, 0.3421929275327672, 0.05915320876705903, 0.002980176629601032, 0.0035138833835977414, 0.11545060959454201, 0.1014703442534602, 0.042099701375740296, 0.0009987951079496531, 0.008209014225571735, 0.09964141440413526, 0.0, 0.001425725400271486, 0.0014362642636998738, 0.02660852979949041, 0.18885327940068686, 0.07860236523395615, 0.12464332150844572, 0.337623694892817, 0.0030030054272841113, 0.15326695232507334, 0.024618440748478954, 0.5637247906648969, 0.14340886146819193, 0.08757094472482795, 0.047799966855893834, 0.0009271378336234801, 0.004021819486006693, 0.06945162511437517, 0.02137075930972693, 2.153232867280279e-07, 0.29226799879065074, 0.00818452328803576, 0.013694137650945034, 0.1752266678871033, 0.24626594012923889, 0.0025229260826945443, 0.006844303927242337, 0.2215263432073362, 0.10766706792591565, 0.07068830198447836, 0.09573691699977029, 0.04767107931195503, 0.01110568615212714, 0.0833198240691957, 0.3917912347891589, 0.015106834030251664, 3.382235734910854e-05, 0.09101349542969592, 0.012089300310573122, 0.1290054873869102, 0.01750680588540808, 0.07250272050938701, 0.0005961756145702078, 0.039196820072924056, 0.06450637035488427, 0.0032312027171718673, 0.04675542262482419, 0.1138558256155516, 0.00035772708171551897, 4.549582474791549e-08, 0.01587640021305823, 0.03080642399168793, 0.037857189164342435, 0.09962723004932891, 0.07541082500692016, 0.13954349534411656, 0.16596400879845852, 0.11831148121881072, 0.01163253276512092, 0.0935043741727145, 0.05506447620823317, 0.19184806075908842, 0.03275063568667693, 0.1956060831782687, 0.09751041365586052, 0.03250642247071893, 0.07321421414085419, 0.4988193834512277, 0.011347710412362329, 0.23845646060358736, 0.0, 0.10395021793447504, 0.00798790812631686, 0.0010086846321715496, 0.16219953790738129, 0.2603598048722146, 0.05063132166559536, 0.21936351673775184, 0.06810015806360041, 0.0017587335459153695, 0.059640972748092325, 0.013810312769696496, 0.025932192776945164, 0.016675720766608674, 0.13416167615560742, 0.20889860433747917, 0.09433008054608487, 0.1701223000996009, 0.004982081318757619, 0.04481393630587523, 0.41193805821614815, 0.13206413195385772, 0.03301508575497186, 0.34150418819758677, 0.015316956711795407, 0.009292391155713271, 0.07523380775350193, 0.04127062269951308, 0.0730290276101832, 0.056659956302869824, 0.012189705725058751, 0.10470685389384346, 0.21106022487040427, 0.04322669794702962, 0.00018068270991530912, 0.1494183494999892, 0.012485823739952107, 8.066059981785682e-05, 0.040374580110907506, 0.017727347731506766, 0.15759964824636585, 0.0022819880019493474, 0.25585150023795894, 0.14454027009699638, 0.05748481231942967, 0.046642738987827365, 0.05696562992979214, 8.327994597193728e-05, 0.03969443999127854, 0.09295112815833, 0.32280606734154293, 0.06834285994620101, 0.23193733594005655, 0.244183173224106, 0.046912269803720784, 0.09780821462594248, 0.21663031460153262, 0.30079487702667485, 0.05535371458643863, 0.029075329482654278, 0.03524108733911045, 0.08340336181964132, 0.14880024243214884, 0.018852703874019067, 0.023662928061633375, 0.09874607957289498, 0.4790298792835071, 0.0001500813872376787, 0.0565576859698809, 0.21358693536974538, 0.05978147336711133, 0.07831555900709108, 0.03248900851518049, 0.0038377071765610263, 0.05623800389019139, 0.18206402717250578, 0.10904327390832286, 0.020373866476159817, 0.142822015967413, 0.32004264726618825, 0.10524192977171767, 0.2502757372014387, 0.03843286807552605, 0.02291344984592778, 0.11784122531734147, 0.02831057738664887, 0.2171692891263461, 0.002470311826591549, 0.075780262610211, 0.21532340609908335, 0.013221783301418728, 0.0008975970649292452, 0.014639605525776363, 0.24912943626964865, 0.0035731554681387345, 0.08472288955676072, 0.042321193465645744, 0.04207073144432427, 0.050407385565296975, 0.033339386141299214, 0.17725260280151045, 5.615508954232758e-07, 0.18646946249440519, 0.004471046326037394, 0.05483871995775729, 0.06905565980214892, 0.18932858635561964, 0.1358000468045785, 0.1719627057069238, 0.06030369940283542, 0.04567617180625642, 0.03530998206793124, 0.14296730961137924, 0.015850083806604767, 0.03764175502566825, 0.046069920769973224, 0.00688989656712272, 0.0002050583640839264, 0.09709911738472168, 0.04250499026862547, 0.018890803565101814, 0.05264017100833361, 0.20848838682642207, 0.008989130093719567, 0.3384028696539871, 0.02638854575190608, 0.1434544695055769, 0.12916629845905156, 0.005687260211228716, 0.02415197837518981, 0.04905886717793589, 0.006582370450130974, 0.046222869303867466, 0.05914660517347699, 0.010950841516808986, 0.10308072805856973, 0.18998185982139962, 0.13385617987560083, 0.05414856005650019, 0.003770362191244121, 0.026802748046267363, 0.14649244268315462, 0.0019158414533964679, 0.026359156405780314, 0.04265652321885401, 0.06409106202444805, 0.041103289652079114, 0.06606368799333881, 0.011075932917625236, 0.0035947675608053826, 0.10501403625789096, 0.127897554840709, 0.2117914181932382, 0.020824690172940013, 0.02167858331978859, 0.12598786379539945, 0.06428071896032692, 0.088749413624819, 0.00044486521945600433, 0.007874399999564503, 0.2445127714105973, 0.02834896652543267, 0.19940088353084515, 0.04158131659265907, 0.052216305510451415, 0.05736451597832307, 0.06222779744251479, 0.00035863315732091424, 0.042331254951003025, 0.09700066285056409, 0.22122869437079545, 0.06810798120220418, 0.11155542615098771, 0.15220212937225777, 0.03487349853979553, 0.07969016187640367, 0.3141376174766241, 1.2776842429349775e-07, 0.01695956772904737, 0.08693203852221072, 0.10337327298234392, 0.1247336576262621, 0.00022001124440092538, 0.016823487456179287, 0.05224983770845343, 0.04350538235328928, 0.0495082863667021, 0.04007357645055205, 0.3793475343308987, 0.05389734335481345, 0.08541687484094466, 0.06788841949339845, 0.018076475975665716, 0.07599033805865958, 0.12455510874191025, 0.08945617344831083, 0.1393550913528306, 0.0679438864746159, 0.1361008741290728, 0.007652240336199732, 0.002279462681814092, 0.23779342032345346, 0.27461655264738766, 0.003348053459365596, 0.0583257950873292, 0.022387071177311712, 0.039975438050032557, 0.002471740102743409, 0.10509650327251016, 0.0, 0.0015418052057738412, 0.11138608966579813, 0.10815418991791372, 0.03032429747628424, 0.08687145080754767, 0.04113334894297337, 0.45644058949556454, 0.0015357418832869616, 0.0006621285972318339, 0.003953848951772344, 0.05999697227619755, 0.2202446859257738, 0.5471642017860315, 0.06223670592852628, 0.022617287248894745, 0.014008222029282646, 0.2335917813860607, 0.12770159538696946, 0.2727051554611417, 0.0013700004204965982, 0.00045517660191854166, 0.00010745963395763338, 0.03277604875737804, 0.006619402938084161, 0.4148001379603949, 0.0289722906826031, 0.005620470154518432, 0.12083765712055838, 0.020967576777622825, 0.0039251177650859725, 0.09634379019027348, 0.07459720574603468, 0.02811821053365519, 0.06502561692192388, 0.00010503783887776068, 0.04561240152035556, 0.08518948234140532, 0.019845645939714055, 0.013380383865551548, 0.09264706218765807, 0.49200553137329833, 0.42702699002230843, 0.0008360760210042393, 0.1351026955808893, 0.0695728825344202, 0.0942512748506404, 0.13657282601589227, 0.19083110110432303, 0.00408777418601836, 0.09229207705306432, 0.04784751521848726, 0.009799065852789583, 0.023340847595363565, 0.145898698138422, 0.1894881649870657, 0.20069783630462093, 0.09074044574154193, 0.3873830014555201, 0.06459600284967183, 0.0060124878256636646, 0.00821742405592899, 0.0778350842253375, 0.0014016118604905944, 0.11980983031091348, 0.06680880519070237, 0.058603127557990874, 0.1052393393100563, 0.005788080374814656, 0.05182339736334496, 0.150602313923366, 0.13495160829270889, 0.19441306849727133, 0.2538442755191863, 0.38502732295502484, 0.003254489673960658, 0.21370855749815904, 0.24286066392495426, 0.11536272987617051, 0.06186690728664358, 0.0370357507187318, 0.3038151537596508, 1.8155114647972008e-06, 0.03439718488994243, 0.15730802368273133, 4.5492185227518394e-08, 0.10165674391523553, 0.05046199467584547, 0.00020084564655083618, 0.22350558321958128, 1.4594016292639304e-06, 0.11529912148324863, 2.4822120924660368e-05, 0.0835019458032282, 0.07428748383190292, 0.060863886369445626, 0.0007447470065955947, 0.04244785172558107, 0.16561388580720038, 0.05524184443639918, 0.28283817855957727, 0.27149798389951557, 0.09869224438074203, 0.09312835252846668, 0.21821005133105412, 0.05322790374732988, 0.04985212465442443, 0.11834542476266378, 0.007148968924897879, 0.19398279640677168, 0.12423095516585905, 0.03941204149557624, 0.32901602019141535, 0.00957247015576603, 0.24954304739593142, 0.13627704970397955, 0.0558097839864171, 0.07963733964385744, 0.05420062534216214, 0.004681301517879705, 0.0, 0.25582991356113494, 0.008155540293049088, 0.17071096452517706, 0.0027140751830716527, 0.09739491885234669, 0.03358976901805205, 0.10116203581567462, 0.11418286633001513, 0.02644406436354373, 0.03435454225853544, 0.0911206451089559, 0.02851185202890855, 0.34111973355121905, 0.010602823111801116, 0.01104864438816137, 0.2836648695311434, 0.040947814514465594, 0.2690131680722751, 0.295870962457962, 0.03330547633604537, 0.002456562655670943, 0.09169402632816363, 0.2755114143113817, 0.00476431185364917, 0.4161994460359796, 0.1649274368479011, 0.10401442277378985, 0.07192685518450703, 0.004434318940381134, 0.13395950970809997, 0.07039915601582845, 0.0, 0.1638726574970773, 0.08465689839050473, 0.04969993019255236, 0.010807195032344152, 0.0295810405971063, 0.18488809015831428, 0.007509121543149834, 0.02948850945212441, 0.13271416536746258, 0.08925423723746173, 0.10367335963058412, 0.15662434101420597, 0.0037187656172887264, 6.745868112595127e-05, 0.3253495948383757, 0.11924253727152696, 0.043305496106928104, 0.20642071783853677, 0.16323639324448286, 0.41290235205360654, 8.398435722286811e-08, 0.09589009188317847, 0.008168679582939292, 0.009360882861666465, 0.36917982090005286, 0.0026528475585542275, 0.28526128734464107, 0.006116820831170037, 0.0015693366124396046, 0.36618412199358763, 0.028558489905002232, 0.0766914679953911, 0.4314608978436809, 0.2650043800415169, 0.008092003623578588, 0.1128019540497758, 0.005473708100879301, 0.14782826727920906, 0.018197406499481445, 0.35516516796041975, 0.2465969423624101, 0.061500984323067415, 0.5510716107152462, 0.011570941177241051, 0.06089610221889618, 0.0028264449907723093, 0.46774458203789104, 0.014463534512087798, 0.24003054811715435, 0.1344233707068492, 0.5930594405301167, 0.04672043989407941, 0.05409260817572182, 0.242244028156822, 0.00016586788358240097, 0.46954205553287703, 0.0020187096194862093, 0.0205454978701966, 0.22572774138874008, 0.04949765452459442, 0.028787150379031165, 0.005471458893122271, 0.08375702301860632, 0.24428753401453768, 0.07284146655023979, 0.0, 0.12694404756644695, 0.07624291485230475, 0.004157596840120037, 2.29358859607422e-05, 0.10163730832271148, 0.13182834467241647, 0.017410566202102726, 0.023370133304330055, 0.07459910293290693, 0.46924153281740744, 0.2566904699818843, 0.006731121746272246, 0.01622401352837767, 0.0008291944121043656, 0.01731320440907084, 0.0004976419975340693, 0.12591314906660864, 0.09670185504211777, 0.2703230227479796, 0.0021723033537254213, 0.11712950938415234, 0.14985977369058076, 0.1048636484448864, 0.19543145734303105, 0.007344925156534636, 0.028565616109861473, 0.45300670265524445, 0.30920488860204687, 0.19994052185151934, 0.02690200967985156, 0.4904938797399384, 0.12084695513535697, 0.0914851015211874, 0.2003660193455313, 0.12297651370752875, 0.04489236873514448, 0.17908603640503118, 0.4136460690128943, 0.017574048481564238, 0.2531996029253156, 0.023204244812274545, 0.10480931095940746, 0.0016531610477300293, 0.2902502133197061, 0.020058370665201372, 0.0045868832604298755, 0.22476826931810112, 0.012835709809412378, 0.06787067873221933, 0.2169514880996658, 0.011396900924547112, 0.00098560185382518, 0.003775160066193954, 0.0012321465272226786, 0.09242114007616184, 0.17562826028490225, 0.043479351791931166, 0.06645097545772997, 0.05959614877765243, 0.15757733962294762, 0.021673015007392365, 0.02081810078713774, 0.03988408304567991, 0.22734933949501554, 0.002722663719743085, 0.40096267454737755, 0.34291092200363205, 0.2895153778705755, 0.04231909842136816, 0.10560199101363882, 0.0012254630331515462, 0.04304064137266314, 0.06307298282935682, 0.08059640831885423, 0.003598074850284369, 0.09563843613256462, 0.04660766251367321, 0.14975641666592698, 0.5924489626521716, 0.07324345552345858, 0.005478232630607355, 0.10399579820031792, 0.16945840852820857, 0.1784958370899518, 0.23917273094772948, 0.06782851430966577, 0.011376986801175968, 1.4763595005854965e-06, 0.11058335736408126, 7.156641591802065e-06, 0.10347855872792056, 0.08552292701296957, 0.3345616584696447, 0.02598039071436183, 0.0022990983342749357, 0.11768395916991083, 0.0975860145241718, 0.06763702958998515, 0.029131720375071696, 0.23682330545145436, 0.0008210912941501722, 0.014799564756645973, 0.30001136621338975, 0.09745339942447452, 0.1932615386499257, 0.07124708196785519, 0.3696793684392095, 0.0369127874226322, 0.02917968061407381, 0.029421940032269903, 0.11989441808515723, 0.2547087842349339, 7.909885022863395e-05, 0.02504500151353913, 0.06082148974255802, 0.01902854492988236, 0.007687131901943749, 0.010007972460951496, 0.04230032873742189, 0.21415472451473014, 0.20485165187516519, 0.09678853161345059, 0.275227448656342, 0.05108344066157107, 0.18752134532257644, 0.07017617864502833, 0.08360252761984623, 0.09628248888339162, 0.09593755336503511, 0.17724466314403467, 0.06091762469139215, 0.02778401424499188, 0.06429527162796295, 0.21499890527664833, 0.27920093371933824, 0.3452129559629261, 0.003866410756002267, 0.029598843836589974, 0.03613191117260598, 0.004701780325535038, 0.13105862530762308, 0.0, 0.015944210523979013, 0.034208801659267186, 0.002839154755770859, 0.014580800305040774, 0.012546571549024598, 0.00844918945112211, 0.07453606697353489, 0.147850100796164, 0.1327165604041337, 0.0024772374807722664, 0.023748427415519167, 0.0037340491693295644, 0.1233093543147488, 0.15155810823339613, 0.008674433717091968, 0.002898348847335691, 3.8596018453852725e-05, 0.0763193383516381, 0.029155992575642782, 0.003440573762618549, 0.0189853730753513, 0.01405898228572463, 0.2424789502690286, 0.3148384922799543, 0.243061001645112, 0.024085700938933807, 0.061080389724384836, 0.052684070008270543, 0.03733248658270122, 0.14380212820000124, 0.039194755424785246, 0.14334700440654669, 0.274041188108404, 0.029336280421703033, 0.16140807996292852, 0.4933382717594284, 0.09418085025876037, 0.052135417492492626, 0.30573801090414393, 0.0068928269009084974, 0.016083228325190418, 0.08407045089314887, 0.10286637444561239, 0.01576095745492012, 0.07763201684331796, 0.014681227556141442, 0.002647264782842517, 0.0059425913942190165, 0.005709399784314011, 1.5736100925008e-05, 0.04719890476235324, 0.012118228544739613, 0.01441241609263117, 0.02817322059502583, 0.0025321899023041062, 0.016638709045717577, 0.14066088862307996, 0.02100251813501744, 0.029502860399136934, 0.36200802574676694, 0.14760543603629792, 0.1858000171121543, 0.06228615304568414, 0.14560483671130345, 0.010567030974485426, 0.09913820053929864, 0.003977557700743199, 0.21319302347822003, 0.04108379452338531, 0.11513137778848337, 0.0272826547064294, 0.0020877687480178398, 0.0983707935404348, 0.09905160275001197, 0.00505893919558253, 0.0015198690583954073, 0.0, 0.011112483865105391, 0.05850094355013057, 0.017503639535750137, 0.020437609034259292, 0.11576438687893337, 0.056890024653136494, 0.049082995204687, 0.028493028461943255, 0.120792794397781, 0.23780902276024596, 0.2560235769839384, 0.3259991191036763, 0.0, 0.010538858350253205, 0.01735273731150153, 0.003937492465166537, 0.024010501837170933, 0.08479114858790196, 0.05710117077044018, 0.0001631670328106814, 0.047438802216297045, 0.23742591798533152, 0.10263592142933207, 0.06042050168952591, 0.29772073413591005, 0.07796765772293722, 0.06354931803996083, 0.05207579250678443, 0.4250156895065526, 0.014952741303956995, 0.09496608065001376, 0.42520897117125184, 0.30725613435183985, 0.04911156349197518, 0.019997412366990815, 0.06916509997854858, 0.032815795817543875, 0.037005683115912846, 0.11539744460185987, 0.5309503050239734, 0.2640415431500714, 0.0032660431071897854, 0.0067143420568595985, 0.13928832594044657, 0.0032195614091726026, 0.003929568781362447, 0.11791208099324929, 0.05062941399926904, 0.08039429669496949, 0.10911384169205299, 0.008057646088521851, 0.2998972689780453, 0.1051622740263458, 0.0884000119439716, 0.05395611928549915, 0.03303040401892155, 0.12289908823220025, 0.2523960812666862, 0.0070122764642290445, 0.07486359705730887, 0.01844198845320567, 0.00398726853250135, 0.014290919712690593, 0.009585789437586648, 0.23036884680282746, 0.07718607658241661, 0.0003887122901584065, 0.26268449822265616, 0.04671254488761323, 0.0018940506377842976, 0.015789920453050048, 0.12932816378200634, 0.0617667542824239, 0.29241547664631234, 0.15400419619939115, 0.19702944737328154, 0.0007429741548165672, 0.17794671066812798, 0.07416079464299753, 0.021248699543474758, 0.07922952752783628, 0.03457443800744368, 0.07483420508542364, 0.07943006463842779, 0.28785408526722694, 0.3420251612233482, 0.027860816543432386, 0.07493888017774222, 0.15327634226435025, 0.12616885707185876, 4.165891031985169e-05, 0.1603015094976249, 0.22275442170446996, 0.3864876674972489, 0.08204476321290648, 0.09184614038124954, 0.10825758443305954, 0.10260887977812737, 0.017120050461585684, 0.19341225559849456, 0.0028348438142433135, 0.1446230342501277, 0.2595798360791868, 0.12573877297793518, 0.10923507280178743, 0.05019730277812838, 0.14101380364988778, 0.23984497756032777, 0.0054798676549867, 0.11300009187434219, 0.12943939122576367, 0.11903017542924585, 0.26107846800242485, 0.027758449558114198, 0.13218791451982792, 0.0032045393628833147, 0.020506600081688187, 0.16934013552423455, 0.0008191613325206926, 0.19484161217886262, 0.14553100807787273, 0.04919246202162747, 0.013420584114298188, 0.059262808719593336, 0.011891411392398295, 0.6310432286016783, 0.09244275551969536, 0.00018234845958089914, 0.01047096276421727, 0.06359670604477664, 0.4029994108235456, 0.1714855964588309, 0.038745816485764396, 0.16324947335935522, 0.04303805659705481, 0.10262991227500949, 0.10677316680612159, 0.03487531072696499, 0.062109425562444406, 0.6232333801448152, 0.17014723305479273, 0.02334727862242316, 0.015903373108373732, 0.1131325519342427, 0.031497368502418535, 0.1573076229210367, 0.023698753482889204, 0.21187614040345512, 0.1644533468916743, 0.15991615130095527, 0.0017450175446071204, 0.0263362834607409, 0.05189150601076662, 0.02258331223540634, 0.24441029454951657, 0.0690959455902988, 0.0030247867163792374, 0.10563970276792521, 0.015697517171848835, 0.2098082778994009, 0.15330970668144617, 0.0789527135515504, 0.07495286638330556, 0.1091434511339269, 0.021204396740046712, 0.40530889948606824, 0.17657911054970646, 0.13756939003148713, 0.1204636053450086, 0.013768320430103346, 0.0006979134019979622, 0.2539053915313889, 0.07873265324752617, 0.014869333617225656, 0.03937170881953873, 0.0007141768001715927, 0.19735558485713012, 0.02809463150841113, 0.1546434581789287, 0.023436820373207275, 0.017521084375145234, 0.0016574006000066985, 0.08093396627749888, 0.00098164824131799, 0.4318596741794905, 0.10057322461114618, 0.035080579233147294, 0.03489820208853579, 0.06257467732047367, 0.258463787156312, 0.20659339529381696, 0.08186165886885374, 0.06565655775876149, 0.1677816100159146, 1.4959480993282811e-05, 0.005136479780720682, 0.001475756417625099, 0.06904586062509505, 0.3990692616276899, 0.041284895666549734, 0.0, 0.012613996889962927, 0.21971535712029605, 0.020977504803724272, 0.013843789948218329, 0.20144371445810128, 0.046667029246432255, 0.3487840528152765, 0.0799064633369527, 0.21215437457979258, 0.2866692609638499, 0.02760991312728279, 0.01226102831272828, 2.3508814883835513e-06, 1.6792521620913483e-05, 0.22118853329634883, 0.07063450948533126, 0.04839929631546456, 0.1282757583447365, 0.18389883328289008, 0.36017430535573164, 0.11390719145545962, 0.004359026095620335, 0.24394036102706396, 0.24771275119074065, 0.02964743183530022, 0.010944184584446293, 0.14593994126850832, 0.27893081685147036, 0.1340854335859271, 0.0256752869956825, 0.09286867200371382, 0.04472843289719229, 0.018989991204032282, 0.0008992022005611248, 0.09432552169134979, 0.06750492193007065, 0.08556640617945363, 8.843365400020089e-05, 0.023572595105165125, 0.07434796901075895, 0.09224471463553216, 0.06589658795929565, 0.09513592698706604, 0.04640076512638451, 0.0660995064137217, 0.05277976440118055, 0.24328468982012919, 0.14948898435131225, 0.0, 0.07054061752125668, 0.08690104393727743, 0.019124631749143563, 1.7260162093829442e-05, 0.092003815778028, 0.26368584524768884, 0.0010657337479343227, 0.004552705089049953, 0.1586862647529636, 0.26173100331073473, 0.21184832812627977, 0.04011180928802447, 0.0061084687457623535, 0.03939234254264293]
    for idx in range(2000):
        if topology_snn.find_population('eA1').nodes[idx].local == True:
            if eaone_calevels[idx] == 0: eaone_calevels[idx] = .104
            parameters.growth_pars['growth_curve_eaone_exc_dendrite'][idx]['eps'] = eaone_calevels[idx]
            synaptic_elements = {
                'Den_ex': parameters.growth_pars['growth_curve_eaone_exc_dendrite'][idx],
                'Axon_ex': parameters.growth_pars['growth_curve_eaone_exc_axon'][idx],
            }
            nest.SetStatus(topology_snn.find_population('eA1').nodes[idx], 'synaptic_elements_param', synaptic_elements)
    #'''

    '''
    # assign currect Ca level as target Ca level to the MGN Neuron
    for idx in range(200):
        if topology_snn.find_population('MGN').nodes[idx].local == True:
            calevel = topology_snn.find_population('MGN').nodes[idx].get("Ca")
            if calevel == 0: calevel = .129
            parameters.growth_pars['growth_curve_mgn_axon'][idx]['eps'] = calevel
            synaptic_elements = {
                'Axon_ex': parameters.growth_pars['growth_curve_mgn_axon'][idx],
            }
            nest.SetStatus(topology_snn.find_population('MGN').nodes[idx], 'synaptic_elements_param', synaptic_elements)
            # crash if the ca level is not successfully set to the neuron
            assert calevel == nest.GetStatus(topology_snn.find_population('MGN').nodes[idx])[0]['synaptic_elements']['Axon_ex']['eps']
    #'''
    '''
    # assign currect Ca level as target Ca level to the eA1 Neuron
    for idx in range(2000):
        if topology_snn.find_population('eA1').nodes[idx].local == True:
            calevel = topology_snn.find_population('eA1').nodes[idx].get("Ca")
            if calevel == 0: calevel = .104
            parameters.growth_pars['growth_curve_eaone_exc_dendrite'][idx]['eps'] = calevel
            synaptic_elements = {
                'Den_ex': parameters.growth_pars['growth_curve_eaone_exc_dendrite'][idx],
            }
            nest.SetStatus(topology_snn.find_population('eA1').nodes[idx], 'synaptic_elements_param', synaptic_elements)
            # crash if the ca level is not successfully set to the neuron
            assert calevel == nest.GetStatus(topology_snn.find_population('eA1').nodes[idx])[0]['synaptic_elements']['Den_ex']['eps']
    #'''

    '''
    # Disable some connection from the MGN to eA1
    c = nest.GetConnections(topology_snn.find_population('MGN').nodes, topology_snn.find_population('eA1').nodes)
    num_disabled_conn = round(parameters.disabled_conn_ratio_pars * len(c))
    disabled_conn_ids = np.random.randint(low=0., high=len(c) - 1, size=num_disabled_conn)
    for idx in disabled_conn_ids:
        if c[idx].target_thread != nest.Rank():
            c[idx].set(weight=0)
    #'''

    # store the network state after demyelination
    # store_net(topology_snn, rank, net_storage_folder, 100000)

    # Enable SP
    nest.EnableStructuralPlasticity()

    logprint.info("Structural Plasticity Enabled")

    with nest.RunManager():
        record_interval = 1000. * 1000
        for total_time in np.arange(0, 12000. * 1000, record_interval):
            logprint.info("Simulating Next Step at " + str(total_time))

            record_data(o, topology_snn)

            t_start = time.time()
            nest.Run(record_interval)
            t_stop = time.time()
            # rtf = (stop - start) [s] / rec interval [ms]
            logprint.info("Real Time Factor " + str( 1000 * (t_stop-t_start)/record_interval ))

            store_net(topology_snn, rank, net_storage_folder, total_time + record_interval)

    record_data(o, topology_snn)

    topology_snn.extract_activity(flush=False)  # this reads out the recordings

    ''' DUMP ALL POPULATIONS INTO A PICKLE FILE '''
    o.spikeobj = dict(
        zip(topology_snn.population_names, [_.spiking_activity for _ in topology_snn.populations.values()]))

    # now also saving the spiking info
    with open(filepath, 'wb') as f:
        pickle.dump(o, f)

    ''' Pearson Coeff Not Needed Now
    # temp spike objects to not include the first second in the computation
    temp_mgn = topology_snn.populations['MGN'].spiking_activity.time_slice(2000, 5000)
    temp_trn = topology_snn.populations['TRN'].spiking_activity.time_slice(2000, 5000)
    temp_eaone = topology_snn.populations['eA1'].spiking_activity.time_slice(2000, 5000)
    temp_iaone = topology_snn.populations['iA1'].spiking_activity.time_slice(2000, 5000)
    precomputed = { "pearsoncoeff" : {
                        "MGN" : temp_mgn.pairwise_pearson_corrcoeff(nb_pairs=500, time_bin=10)[0],
                        "TRN" : temp_trn.pairwise_pearson_corrcoeff(nb_pairs=500, time_bin=10)[0],
                        "eA1" : temp_eaone.pairwise_pearson_corrcoeff(nb_pairs=500, time_bin=10)[0],
                        "iA1" : temp_iaone.pairwise_pearson_corrcoeff(nb_pairs=500, time_bin=10)[0]
                    }
                }

    print(precomputed, flush=True)
    '''
